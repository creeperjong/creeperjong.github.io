[{"body":" 此文同步發表於Medium\n 嗨囉大家好！我是柯基。目前是資工系大三的學生，並在APPX時賦科技擔任非常菜的後端實習生。\n這篇文章要來分享我這半個月來在時賦科技擔任後端實習生的心得及所學，並聊聊各種心路歷程～\n起源 - 進入時賦 這一切的起源，要追溯回大二升大三那年暑假。\n約莫大二下學期期中考前後，系上的教授籌備了一項實習媒合計畫，旨在與各大科技公司合作，為系上學生謀取實習機會並協助投遞履歷。看到這項計畫後，我和同學三五成群一起加入，參與了各個合作公司的面試及考核。\n然而，因為開發經驗不足，加上應徵態度不夠積極，最後同學們都找到工作了，我卻一份都沒有找到，暑假就這樣泡湯了。「我的暑假只想拿來學習啊」當下滿腦都是這樣的念頭（但暑假還是玩得很開心）。\n在大三上學期，我修了系上一門遠近馳名的課「軟體工程」，在近20人的團隊中，以Ruby on Rails開發後端API，並與前端串接完成了一個完整的專案。藉著這次的經驗與衝勁，我立志在隔年找一份後端的學年實習，以補回我暑假的缺憾。於是，我抱著我單薄卻充滿心意的履歷來到了時賦科技，並成功得到了賞賜，我的實習之路便就此開始了！\n     介紹－關於時賦科技  時賦科技團隊創立於民國103年 ，從事電腦軟體服務業，執行過許多大大小小專案，擁有豐富的專案實戰經驗，累積了許多domain knowledge以及不同領域的合作夥伴。\n為了提供人才更多的機會，時賦科技開始耕耘教育，期望將程式專業教育與業界實務結合，豐富的專案經驗與經營團隊的背景，使程式教育更加有競爭力，且為業界所認可。\n時賦在做的事：\n  軟體客製化開發\n  APP應用軟體開發\n  APP UI/UX 設計\n  資料庫設計規劃與調校\n  軟體雲端服務架構規劃\n  － 擷取自時賦科技官方網站\n 在時賦科技中，開發大多採用前後端分離，並主要使用C# .NET、Java及Node.js作為開發語言。並且，不定期舉辦講座及課程，期望能培育更多人才。\n初來乍到－Rails to .NET 在講心得以前，先來帶點技術層面的東西吧。\n第一天到公司，把一些例行的報到手續給辦完之後，我的主管Jim就派了一份C# .NET CRUD的小專案給我作為練習。在寫的過程中，慢慢的回想起C#的語法，也漸漸熟悉系統架構及一些在.NET常用的Coding convention，下面請聽我娓娓道來。\n由於在寫Ruby on Rails的同個學期裡，我也同時有在寫C#，雖然內容僅限於Windows Form，但物件導向的概念也算是有帶過一遍。即使如此，在時賦實習所用到的系統架構是與先前截然不同的（雖然關聯性不高但還是提及一下第二專案效應，適合用來警惕和我一樣的新手開發者）。\n先前在使用Rails開發時採用的是MVC架構，而由於後端是Api-only，因此View component幾乎被捨棄，加上後端小組內成員幾乎都是第一次接觸開發，導致整支專案的相關邏輯幾乎都寫在Controller裡，看起來十分凌亂且難以維護。\n而我在.NET下練習CRUD開發時，所採用的系統架構如下圖所示：\n      Client  客戶端。後端開發時通常使用微軟支援的Swagger套件來對Web API進行測試，Postman則是作為輔助方案。\n Presentation Layer  表現層。對於客戶端對API發送的請求，會依據其RESTful的架構被轉發 (Route) 到此處，因此此層有許多Controller，分別處理不同集合的API。此外，有關用戶的身分驗證及簡單的Json conversion也會在此層完成。\n Business Layer  業務層。此層主要儲存商業邏輯，包括資料驗證及授權等等。針對一個資料主體會對應到一個Service，代表對此主體的所有功能及操作，最後再經由Controller對主體呼叫對應的服務。\n 表現層與業務層間的分工相對其它較不明顯。只要屬於邏輯的部分，皆可歸類至業務層中。然而，過度封裝會造成程式碼不直觀，難以維護，封裝不妥則可能導致重造輪子或程式碼冗長，該如何妥善的分類並封裝商業邏輯，達到簡潔而有效率的地步，取決於開發者的經驗與判斷。\n  Persistence Layer  持久層。此層主要負責與資料庫互動的相關邏輯，並且僅能透過此層對資料庫進行CRUD操作。在此又使用DAO和ORM作為實現方法，下面會再提到。\n大致的架構介紹完了，來講一下一些實作會用到的結構。\n DTO (Data Transfer Object)  數據傳輸對象。在接收及發送請求時，經常會需要預設或取得請求內Payload或Parameters的內容，此時可以宣告一個物件，負責攜帶需要傳遞的參數或其它內容，為客戶端及應用層提供資料傳輸的介面。不僅可以統一資料回傳格式（見註解），在開發時也可以使用各種好用的泛型函式，對資料的處理得以更加彈性。\n 註：此處僅是統一回傳資料主體的格式（如ID, Name, Email等等的屬性），並非指整個回傳Payload的格式。\n  Middleware  中介軟體。在Controller接收請求及回傳回應前，有一系列處理特定目的的程式，稱為Middleware。Middleware 呼叫的方式為LIFO (Last-In-First-Out)，接收請求時優先處理的，回應時就必須最後執行。在此實際的應用則是統一回傳格式如下，前端串接時才能有統一的介面接收API的回應。\n1{ 2IsSuccess: bool, 3SysMsg: string, 4Data: object 5}  DAO (Data Access Object)  資料存取物件。與DTO類似，在此是為應用層及資料庫提供資料主體存取的統一介面，內容則對映資料庫的各欄位、相關限制及相互關聯性。應用層可透過DAO存取資料庫的內容，而不需暴露資料庫的實際內容與細節。\n ORM (Object Relational Mapping)  物件關聯對映。在實作DAO的過程中，為了抽象化對資料庫的操作，ORM 將物件對映到資料庫的各個欄位，提供使用者以物件導向的方式修改資料庫的內容。以C# .NET Entity Framework Core為例，若使用原生語法對資料庫進行Query，程式碼如下：\n1SELECT*FROMUsers;#查詢2INSERTINTOUsersVALUES(\u0026#39;柯基\u0026#39;,\u0026#39;corgi\u0026#39;);#新增3UPDATEUsersSETName=\u0026#39;柯基基\u0026#39;WHEREName=\u0026#39;柯基\u0026#39;;#更新4DELETEFROMUsersWHEREName=\u0026#39;柯基基\u0026#39;;#刪除對應的EF Core語法如下：\n1db.Users.ToList(); // 查詢 2db.Add(new User{Name = \u0026#39;柯基\u0026#39;, Uid= \u0026#39;corgi\u0026#39;}); // 新增 3var user = db.Users.Single(u =\u0026gt; u.Name == \u0026#39;柯基\u0026#39;); // 更新 4user.Name = \u0026#39;柯基基\u0026#39;; 5db.Remove(user); // 刪除 6db.SaveChanges(); ORM 有以下優點：\n  操作簡單直覺。透過物件導向的方式對資料庫進行操作，比起直接進行SQL Query來得更加直覺明瞭。\n  安全。所有對資料庫的操作皆需透過ORM，而非直接Query，因此可以防止如SQL injection等資料庫存取上的資安疑慮。\n  泛用於各種資料庫。當提供服務的資料庫引擎有更動時，僅需更改使用的套件，在寫法上不需做太大的更動。若使用傳統的存取方法，則需逐一修改Query語法。\n  除了以上的架構與技術，我也學到了C# .NET中一些好用的套件及技巧。\n 依賴注入 (Dependency Injection)  透過將架構中各個Component使用Interface抽象化，再將Interface及其實作逐一註冊進DI容器中，即可在建構需要下一層方法的物件時，直接從DI容器中取得Interface並提供給物件使用其方法，解決層與層之間強耦合的情況。\n AutoMapper  使用套件處理建構物件或物件型別轉換時，需傳入多個參數進入建構式，導致程式難以維護的問題。\n以上就是我這半個月內學到關於C# .NET的技術與開發架構，有些是先備知識，也有很多是新學的東西，雖然理解和使用上沒遇到太大的問題，但也是查了不少文件，也求救了好幾次Orz。感謝主管Jim和另一位實習生Tom一直幫我解決問題。\n經驗值上升－至今感受到的差別 講完技術類的東西，可以來談談經驗和心得感想了。\n目前在時賦雖然只有半個月不到，也還沒進入到真正的專案中，但至今學到的東西，感受上已經接近學校內一學期可以學到的東西了，所學的新知及感受良多啊。\n在我看來，實習時所接觸的開發跟在學校接觸的有以下差別：\n 程式品質的差別  正如我前面所提，先前在學校所開發的專案，由於大部分後端成員都是第一次接觸開發，系統並沒有嚴謹的架構，加上配合課程進度而被壓縮的開發時程，也沒有在執行效率、可維護性和可讀性上下太多工夫，現在回頭看看之前寫的Source code，真的是不敢恭維。\n     在實習時練習的專案中，不僅要遵守前面所提及的架構去開發功能，善用各種套件及工具來完善系統的可維護性，還要時時Review自己的Code是否缺乏效率或難以閱讀，雖然這是自己平常寫Code就有的習慣，但在實習期間，又需更加重視這樣的要求。\n Troubleshooting的能力  在學校開發時，因為時常會有和同學吃飯閒聊，或在別堂課遇到的機會，因此有很多機會可以討論在開發上遇到的問題，甚至現場電腦拿出來就可以解決。相較於實習期間，由於公司裡每個人每天都有要完成的進度，也有時程上的壓力，因此比起在學校，有更多問題都要靠自己積極解決，使用Debugger、手動偵錯、爬文及查文件的能力也需隨之提升。\n 維持效率的方法  實習期間不同於在學校開發，是一天長達八小時的開發時數，為了維持良好的效率，除了一定的自制力以外，時賦也給予我們很多監督自己或恢復活力的機會：\n Daily sync  每天早上，所有人都會聚在一起，報告今天在哪個專案預計要完成哪些進度，這不僅僅是告知負責同個專案的人，更是告訴自己今天必須完成什麼項目，日後也方便回顧自己是否在某個項目花了太多時間，並加以檢討改進！\nRD Sharing  專屬於RD部門的分享時間！每周我們都會找一個固定的時間，分享這週做了什麼事？遇到了什麼困難？怎麼解決？或是一起討論有什麼解決方法，檢討彼此的做法是否有疏漏等等。這個時間不但可以檢討自己的程式，得到解答或找到問題的頭緒，更可以從別人的經驗中學得新東西或新觀點，對開發上有莫大的幫助，是我個人很喜歡的時間！\n下午茶時間  公司不定期舉辦的享樂時間！在這時候，大家可以揪團點自己喜歡的飲料或甜點，等外送送到後，便可稍作休息，讓腦袋放空一下。當然，休息不是為了不要走路，是為了走更長遠的路，在這之後，我通常會起來走一走，回想一下剛才遇到的問題，或Review一下Code，此時再配一杯咖啡，思緒清晰許多，很多問題就能迎刃而解，對接下來的工作也會更有效率！\n     結語 - 心得與未來展望 這是我人生第一個實習，很慶幸來到了時賦。在這之前，我並沒有接觸過實際業界開發的流程或模式，總是希望能找到一個「可以帶走學校學不到的東西」的實習職位。確定加入時賦後，也是會偶爾擔心實習是否只是打雜，到最後可能什麼都沒學到。慶幸的是，這些擔憂都沒有發生。\n在時賦的這半個月，我幾乎每天都能學到新東西，且能充分感受的到每個人都是一起奮鬥的夥伴，彼此互相幫助及砥礪，沒有所謂的上下階級之分。在這樣的環境下成長，是非常充實且滿足的，很感謝時賦的大家長FRank願意給我這個機會。\n在未來的實習生涯裡，我期許自己能早點熟悉開發，早日做足準備後步入正式專案，汲取更多實戰經驗，並學習更多新技術，涉略更多領域，最後，希望能找時間把這些所學都記錄下來，對於起初實習的所抱有的期待，也能算是如願以償了！\n","link":"/post/appx-backend-intern-01/","section":"post","tags":["Backend","C# .NET"],"title":"《APPX時賦科技》.NET初體驗 \u0026 後端實習心得雜談"},{"body":"","link":"/series/appx-intern/","section":"series","tags":null,"title":"APPX Intern"},{"body":"","link":"/tags/backend/","section":"tags","tags":null,"title":"Backend"},{"body":"","link":"/tags/c#-.net/","section":"tags","tags":null,"title":"C# .NET"},{"body":"","link":"/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"/","section":"","tags":null,"title":"Corgi's Blog"},{"body":"","link":"/post/","section":"post","tags":null,"title":"Posts"},{"body":"","link":"/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"/categories/software-development/","section":"categories","tags":null,"title":"Software Development"},{"body":"","link":"/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"/tags/linux/","section":"tags","tags":null,"title":"Linux"},{"body":"","link":"/categories/linux/","section":"categories","tags":null,"title":"Linux"},{"body":"嗯，雖然說要寫C#，但好像不知道從何寫起，就先寫最近剛解決的問題好了。\n前言 上一篇裡面，我寫了這樣一段話\n 這個時候十之八九就是時區的問題了，Hugo預設的時區都是UTC+0，所以假設我在台北時間2023-01-01 01:00設定了date: 2023-01-01， 但其實Hugo認定目前的時間是UTC+0，也就是2022-12-31 17:00，時間還沒到，自然無法顯示文章。\n解決的方法也很簡單，在config.toml中加入這行\n1timeZone = \u0026#34;Asia/Taipei\u0026#34; 就可以把時區調到臺北，行為就會合理了。\n 正當我天真的以為問題解決時，幾天後開一篇新的文章來寫，發現又出現同樣的問題了。\n當然我很快就發現，Hugo雖然有預設時區，但時間抓的卻是系統時間。\n再看看我系統的時間，果然，晚了兩天，我的WSL依舊是正常發揮。\n這個問題已經不是第一次遇到了，包括之前每次push完code，上去網站看，commit紀錄都是顯示昨天或是好幾天前推上去的，十分惱人。\n直到這次的契機，才打算好好正視這個一直存在的問題。\n手動校時 眾所周知，在Linux中取得系統時間的方式如下\n1creeperjong@DESKTOP-TQKFNBI:~$ date 2Fri Jan 13 13:25:19 CST 2023 若你發現系統時間有所誤差，可以輸入以下指令進行手動校時\n1sudo ntpdate time.stdtime.gov.tw 其中，time.stdtime.gov.tw是中華電信提供的時間校對服務URI，可透過ntpdate套件指定NTP server來進行校時。\n當然，系統時間與BIOS的時間是分開的，所以這裡一起校正BIOS的時間，以免又出一堆有的沒的的問題。\n1sudo hwclock -w 其中-w便代表將系統時間寫入BIOS時間。\n這個做法我用了將近兩年（從開始用WSL到現在），起初因為剛開始學程式，學的都是皮毛，系統時間根本不足一提。\n但最近不管是Git的使用上，或是各種需要取用系統時間的服務，時間的不準確一直困擾著我，想著每次都手動校時也不是辦法，於是這個方法也慢慢被我捨棄了（必要時還是會用）。\n排程校時 Cron是Unix-Like OS中基於時間的排程系統，換句話說，你可以指定作業系統定期做某些事情，像是每十分鐘就向不回信的教授寄一封信之類的。\n在/etc/crontab中，紀錄的便是Cron所排程的時間表，格式如下：\n1.---------------- 分 (0 - 59) 2| .------------- 時 (0 - 23) 3| | .---------- 日 (1 - 31) 4| | | .------- 月 (1 - 12) 或 jan,feb,mar,apr ... 5| | | | .---- 週 (0 - 6) (Sunday=0 or 7) 或 sun,mon,tue,wed,thu,fri,sat 6| | | | | 7* * * * * 使用者名稱 要執行的指令 在我們的例子中，會新增如下的排程：\n100 12 * * * root (/usr/sbin/ntpdate time.stdtime.gov.tw \u0026amp;\u0026amp; /sbin/hwclock -w) \u0026amp;\u0026gt; /dev/null 意及每天中午12點整，用root的身分執行系統校時，並寫入BIOS時間，最後將所有輸出捨棄。\n Crontab解說：\n*: 每個單位都執行一次（例：每天、每個月...）\n,: 列舉執行時間（例：0,30 * * * * 代表每分鐘的第0,30秒執行一次）\n-: 執行時間範圍（例：0 9-12 * * * 代表每天9點到12點每小時整點執行一次）\n%: 間隔時間（例：*%10 * * * * 代表每10秒執行一次）\n\u0026amp;\u0026gt;: Shell中的重定向運算子，將stdout和stderr導向至參數所帶之文件\n/dev/null: 導向至此的資料會被捨棄\n 這時候又出現另一個問題了。如果Cron是基於時間的排程系統，那是否代表它也需要看系統時間來做事？\n因此就會出現未校正前的時間是13:00:00，我還要等上整整一天才可以跑我的排程。\n所以後來又改成了這樣\n100 * * * * root (/usr/sbin/ntpdate time.stdtime.gov.tw \u0026amp;\u0026amp; /sbin/hwclock -w) \u0026amp;\u0026gt; /dev/null 這樣就是不管系統時間是不是正確的，每隔一個小時就會校時一次，也算是暫時解決這個問題了。\n後續 在寫這篇文的同時，我有一直去查各種校時的方法，在這段期間，我發現WSL的時間會不同步， 似乎是因為我讓電腦休眠的關係，導致我休眠一天，系統時間就停止了一天，想想好像也蠻合理的。\n後來在網路上針對WSL校時做搜索，發現在2020年就有休眠導致WSL時間停止這個issue了，且在2021年4月的Release中解決了這個問題。\n看了一下我WSL上次更新的時間是2020/11/2，相當於我裝完之後就沒更新過了...\n總之，我把它更新了，會不會自動校時還不知道，希望這個問題就此解決（雖然網路上還是很多人沒有解決）。\n除了手動和排程校時外，還可以使用NTP的服務進行自動校時，網路上都有很多教程， 這裡因為WSL似乎不支援網路上所提供的做法，加上我又懶得研究畢竟問題已經算解決了， 所以就不特別補充了。\n未來若有其他發現，再考慮多發一篇文，紀錄一下一路踩坑的過程。\n","link":"/post/linux-time-correction/","section":"post","tags":["Linux","WSL"],"title":"Linux系統時間校正及自動排程校時"},{"body":"","link":"/tags/wsl/","section":"tags","tags":null,"title":"WSL"},{"body":"哈囉！我是柯基 本名李聖澄，目前就讀國立師範大學資工系大三。\n這裡是我分享日常、紀錄所學的地方，\n由於大部分文章主要不是教學性質，所以可能會有解釋不清的地方，還請見諒～\n歡迎蒞臨指教\nContact me Email: leogood50203@gmail.com\nFacebook: 請點我\nInstagram: 請點我\nLinkedin: 請點我\nGithub: 請點我（半廢棄狀態）\nMedium: 請點我（部分文章同步更新）\n","link":"/about/","section":"","tags":null,"title":"關於我"},{"body":"","link":"/categories/blog/","section":"categories","tags":null,"title":"Blog"},{"body":"","link":"/tags/hugo/","section":"tags","tags":null,"title":"Hugo"},{"body":"終於可以寫文了，我的天。\n先講一下事情的來龍去脈，和這個Blog的出生過程好了。\n起源 看了一下放Blog資料的修改紀錄，最早在2022/5/20就有這個Blog了。\n當初看到很多人都有自己的Blog，上面可以放自己的學習心得或記錄，覺得蠻酷的？ 加上當初為了找實習，希望能迅速拉個自己的Blog，再隨便丟幾篇文上去，改改日期就可以拿來充數了。\n結果呢，可想而知沒那麼順利，光是選主題我就猶豫了老半天，這個下面再說。\n我選擇的框架是Hugo。Hugo是一個使用Golang開發的開源網站框架，旨在生成靜態的網頁，詳細介紹可以自己去Hugo的官網看，因為我也只知道這些。另外還有一個框架叫Hexo，使用Node.js開發，也同樣是生成靜態網頁的框架。\n至於為何選擇Hugo，純粹是因為身邊比較多人用而已，呵呵。\n主題 這裡是Hugo官網目前的所有主題， 第一次進去看到光是Blog標籤就有200多個，我整個心都涼了，身為一個嚴重選擇困難的人，可能選到我畢業都還沒選完。\n於是呢，我幫自己列了幾點需求，至少找起來快多了。\n Blog Responsive Dark mode (資工肥宅一定要的吧) 主頁面有最新文章列表 側欄有個人簡介及Tag UI簡單美觀  綜合以上所有條件，和我傑出的猶豫能力，我選擇了你們現在看到的這個主題Clarity。\n其實挑主題這件事也不是Tag按一按就結束的。像Clarity這個主題的Tag只有Blog和Dark，它有做響應式，但也完全沒放Responsive， 更別說後面三點你要列Tag也不知道打什麼的特色，所以在每個都點進去看範例的情況下，我大概選了快一整天。\n我知道這是一個非常爛大街的主題（應該），但至少他有符合我上面的需求，用起來還算蠻愉悅的，希望大家也看得愉悅。\n（其實我根本不知道會不會有人來看，主要是打給自己記錄用）\n架設 架設初步都是非常快樂的，跟著github上的README走就完成80%了。我這裡不打算一步一步講，因為那不是重點。\n簡而言之，他提供了三種作法。\n 使用GitPod或Clone下來開Hugo server  這個作法是給想開源貢獻或只想載下來玩看看的人，不適合要架設Blog的人。\n使用Hugo modules  據說是最快且最好維護的方法，當然選這個啊，哪次不選了。\n使用Git submodules  使用比較老的方式維護主題的repo。\n我使用的是第二個方法，做法在github上都有，這裡一樣略過。\n值得一提的是2和3的作法。由於Hugo本身的repo和主題的repo是分開的，因此無法用單一的repo統一管理。 這裡的Hugo module的解法就用類似套件管理的方式管理主題的repo， 至於git submodule是在沒有Hugo的情況下，可以使用submodule在你的repo下分割出一個子repo， 讓你主題的repo可以在此管理更新。\n上面步驟都做完後，就可以用hugo server在本機瀏覽了，日後也可以測試文章內容。\n hugo server後可接一些Flag，這裡介紹一些我比較常用的\n-D 連同文章草稿一起顯示\n-F 連同未來文章一起顯示\n 部署 本機測試成功後，就可以準備部署到網站上了。\n這裡使用Github Pages來部署網站，詳細教學網路上搜也是滿地都是，這裡不贅述。\n比較值得一提的是CI/CD的部分，這裡使用了Github Actions來處理，讓每次Push完後，網站都能自動部署上去。\n在你[Username].github.io的repo中Action \u0026gt; New workflow \u0026gt; Simple workflow Configure，新增一個叫hugo_publish.yml的workflow， 內容如下（請根據需求更改內容）：\n1name:github pages23on:4push:5branches:6- main7paths:[\u0026#34;content/**\u0026#34;,\u0026#34;.github/workflows/hugo_publish.yml\u0026#34;,\u0026#34;config/**\u0026#34;,\u0026#34;layouts/**\u0026#34;,\u0026#34;static/**\u0026#34;]89jobs:10deploy:11runs-on:ubuntu-20.0412steps:13- uses:actions/checkout@v214with:15submodules:true# Fetch Hugo themes (true OR recursive)16fetch-depth:0# Fetch all history for .GitInfo and .Lastmod1718- name:Setup Hugo19uses:peaceiris/actions-hugo@v220with:21hugo-version:\u0026#39;0.99.1\u0026#39;22extended:true2324- name:Build25run:hugo --minify2627- name:Deploy28uses:peaceiris/actions-gh-pages@v329with:30github_token:${{ secrets.GITHUB_TOKEN }}31publish_dir:./public32cname:\u0026#39;blog.corgicreeperjong.tk\u0026#39;最後一行的cname是自定義網域的部分，如果沒有就不需要填。自定義網域的方式是先找一個免費的Domain name（你有錢也可以買一個）， 再用Cloudflare去設定代理github.io，結果就會如你現在所看到的，不是github的域名，但是確確實實的host在github上。\n 2023/2/10 更新\n昨天公司RD sharing講到Cloudflare，我說我只拿來做redirect， 被罵殺雞用牛刀了QQ我找機會會來好好研究的\n 我這裡也打算略過詳細的做法，這篇主要是要記錄自己踩坑的紀錄，就沒打算寫太細了。 （其實還有一部份原因是忘記了，這些東西都是半年前找同學求助弄好的，早就忘光了）\n接著，在Settings \u0026gt; Pages裡，設定Source為Deploy from a branch， 底下的Branch設定為gh-pages，如果你有自訂網域，記得要填在Custom Domain裡。 最後，把最下面的Enforce HTTPS打開，除非你的網域不支援HTTPS。\n以上都設定好後，就可以Push上去看看成果了。\n碰上大岩壁 由於本身沒什麼架網站的經驗，所以真的是東牆補西牆，然後四處求救，真的要好好檢討一下。\n也是因為這樣，我一個設定沒寫好，就找了一個月，下面請聽我娓娓道來。\n當我完成上面的部署後，很開心的在瀏覽器輸入blog.corgicreeperjong.tk，想看看成果。 結果呢，他給我這個鬼東西\n     然後呢，就沒有然後了。\n我在發現這個Bug後的一個月，四處爬文四處問，雖然沒有問得很積極，但也是煩惱我不久。明明Local測都可以，為什麼部署上去就壞掉了呢？\n於是有一天，我趁有空的時候問了一下子權（aka Subarya），因為他也是用Hugo架站，我們試著把他的repo clone下來對比，依舊沒發現什麼端倪。\n直到子權幫我查到了這個...\n1# set `baseurl` to your root domain 2# if you set it to \u0026#34;/\u0026#34; share icons won\u0026#39;t work properly on production 3baseurl = \u0026#34;/\u0026#34; # Include trailing slash 然後我再看一下我的config/_default/config.toml\n1baseurl = \u0026#34;blog.corgicreeperjong.tk\u0026#34; 嗯...我看到root domain就寫了自定義的domain，結果寫一個slash就完事了。解決這個問題之後，子權便跟我說：\n「太棒了，那你之後發你的第一篇文了，通常第一篇都是記錄自己架設Blog的整個過程，你應該有很多東西可以寫，哈哈哈。」\n當下很開心，想回家就開始寫第一篇文，記錄我這一個月來（其實好像不只）的心血，結果那時候剛好適逢系上資工營的行前營， 加上暑假一到就跑去補習班當輔導老師（嗯對，我那年暑假沒找到實習），所以根本忘了這回事。\n直到最近，這件事又重回到我的To-do list裡面，至於到發出這篇文前又發生了什麼，我們下面繼續連載。\n重新連載 最近學校放寒假了，16周雖然有點累，但放假後真的很爽。我這段期間找了份實習，主要是寫C#， 也就是因為這份實習剛開始真的學到太多東西了，迫不及待把這些知識記下來。於是，我就來繼續來弄這個東東了。\n當然啦，半年前的config沒有設定完全，還是踩了一些坑。\n先來講一下時區的問題，Hugo對於文章日期的處理還算是好用。每篇文章的最上面會有一區用---或+++框住的參數區， 這裡稱為page variables，顧名思義，就是針對每篇文章的configuration，包括title、description等等。\n關於Page variable的格式 若使用---，請用以下格式\n1[variable_name]: [value] 若使用+++，請用以下格式\n1[variable_name] = [value]   其中，date可以指定發文日期，格式為YYYY-MM-DD，值得注意的是，Hugo只會顯示當前日期以前的文章， 也就是說，你可以設定一篇文章的發文日期在未來的某一天，就可以達成排程發文的功能，雖然我暫時想不到什麼時候會用到就是了。\n發文日期到此還沒結束，當你設定好後很開心地輸入hugo server，想看自己文章的排版如何，結果卻還是一片黑或一片白，啥都沒有。\n這個時候十之八九就是時區的問題了，Hugo預設的時區都是UTC+0，所以假設我在台北時間2023-01-01 01:00設定了date: 2023-01-01， 但其實Hugo認定目前的時間是UTC+0，也就是2022-12-31 17:00，時間還沒到，自然無法顯示文章。\n解決的方法也很簡單，在config.toml中加入這行\n1timeZone = \u0026#34;Asia/Taipei\u0026#34; 就可以把時區調到臺北，行為就會合理了。\n還有一點比較瑣碎。主頁面上方原本有個Archive的標籤，現在暫時被我取消了。原先在exampleSite看到的時候， 以為是跟別人Blog上的Archive一樣，可以封存自己不想放在主頁的文章（之類的）。\n直到後來經過一番摸索，看到了他的config\n1[[main]] 2name = \u0026#34;Archives\u0026#34; # 標籤名稱 3url = \u0026#34;post/rich-content/\u0026#34; # 轉向url 4weight = -109 # 標籤位置，自行摸索 ...只是一個捷徑而已。\n但也算是好用？之後或許可以試試看讓url導向到主頁以外的文章列表，就可以達成真正Archive的效果了。\n 這裡順便統整一下幾個常用的page variables\nauthor: 作者\ntitle: 文章標題\nsummary: 文章列表中呈現的文章敘述\ndate: 發布日期\ndraft: 是否為草稿\ntoc: 是否在開頭加上目錄（Table of contents）\nslug: 自訂url\naliases: url別名（會重新導向至預設或自訂url）\nusePageBundles: 使用Bundle管理文章（詳見這裡）\nthumbnail: 文章縮圖\ncategories, tags, series: 分類用的標籤\nfeatured: 是否為精選文章（可設定置頂或放於側欄）\n 未來展望 其實在寫這篇的同時，我也發現了很多還不知道怎麼設定的feature，或是不滿意的地方\n 閱讀時間不準確 i18n設置 markdown樣式不如預期 前面提到的Archive功能 不知道可不可以開留言功能？  這篇裡面因為主要給自己記錄用，所以也忽略了很多沒踩坑的細節，config的設置尤其多... 主要是希望自己以後還是能養成看文件的習慣啦，就忽略了很多文件有寫的東西。\n如果真的有人吃飽沒事幹看到這邊，也希望可以不吝給一下意見，包括文章內容或Blog設置等等的。\n最後放一下兩位幫助我架站的好同學的架站文和Blog，大家如果真的要技術一點的文章可以去這邊看。\n優秀資源分享 快速建立Hugo Blog\nHugo-01：建立一個Hugo Blog\n幫我找baseUrl Bug的子權（Subarya）的部落格\nSubarya\n 下一篇高機率發C#，也有可能繼續改Blog，希望不要半途而廢。\n","link":"/post/first-post/","section":"post","tags":["Hugo"],"title":"第一篇文！關於架設Blog的碰壁全過程"},{"body":"","link":"/archives/","section":"","tags":null,"title":""}]